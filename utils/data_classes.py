# utils/data_classes.py

import datetime
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Any, Union

# Use timezone-aware datetimes where appropriate
UTC = datetime.timezone.utc

@dataclass
class PriceBar:
    """Data class for OHLCV price bars."""
    instrument: str
    timestamp: datetime.datetime # Time at the start of the bar interval (UTC recommended)
    open: float
    high: float
    low: float
    close: float
    volume: float # Use float for volume as it can be fractional sometimes

@dataclass
class PriceSnapshot:
    """Data class for real-time price snapshots (ticks or quotes)."""
    instrument: str
    timestamp: datetime.datetime # Time of the snapshot (UTC recommended)
    bid: float
    ask: float
    last_price: float # Last traded price, or mid-price if unavailable
    volume: float = 0.0 # Volume associated with this snapshot/tick (optional)
    # Optional: Order book depth if available from API
    # depth: Dict[str, List[Dict[str, float]]] = field(default_factory=dict) # {'bids': [{'price': p, 'volume': v}], 'asks': [...]}

@dataclass
class TradingSignal:
    """Data class for trading signals generated by strategies or ML models."""
    instrument: str
    timestamp: datetime.datetime # Time the signal was generated (UTC recommended)
    signal_type: str # e.g., 'buy', 'sell', 'hold', 'exit_long', 'exit_short'
    direction: Optional[str] = None # 'long' or 'short' (relevant for entry signals)
    confidence: float = 0.0 # Confidence score (e.g., 0.0 to 1.0)
    strategy_name: Optional[str] = None # Name of the strategy generating the signal
    # Optional: Suggested parameters for execution
    suggested_stop_loss: Optional[float] = None
    suggested_take_profit: Optional[float] = None
    # Optional: Additional features or metadata from the signal generation process
    features: Dict[str, Any] = field(default_factory=dict)

@dataclass
class Position:
    """Data class for open trading positions."""
    # --- Fields likely mapped from Tradovate Position object ---
    id: Optional[int] # Tradovate Position ID (usually an integer)
    account_id: Optional[int] # Tradovate Account ID
    contract_id: Optional[int] # Tradovate Contract ID
    instrument: str # Tradovate Symbol (e.g., 'ESU2')
    direction: str # 'long' or 'short' (Derived from netPos)
    quantity: float # Position size (Absolute value of netPos)
    entry_price: float # Average entry price (avgEntryPrice)
    entry_time: Optional[datetime.datetime] = None # Timestamp of first fill (Needs tracking)
    # --- Fields updated periodically/calculated ---
    current_price: Optional[float] = None # Last known market price for the instrument
    unrealized_pl: Optional[float] = None # Unrealized P/L (Provided by Tradovate, e.g., unrealizedPL)
    realized_pl: Optional[float] = None # Realized P/L for this position (Provided by Tradovate)
    stop_loss_order_id: Optional[int] = None # ID of associated SL order, if any
    take_profit_order_id: Optional[int] = None # ID of associated TP order, if any
    # --- Optional metadata ---
    strategy_type: Optional[str] = None # Strategy that opened the position
    features: Dict[str, Any] = field(default_factory=dict) # Features at time of entry or updates

@dataclass
class Trade:
    """Data class for completed trades."""
    id: Optional[str] # Unique trade/order ID from the broker/API if available
    instrument: str
    direction: str # 'long' or 'short'
    quantity: float # Size of the trade in lots
    entry_price: float
    entry_time: datetime.datetime # Time of entry (UTC recommended)
    exit_price: float
    exit_time: datetime.datetime # Time of exit (UTC recommended)
    profit_loss: float # Profit/Loss in account currency
    profit_loss_pips: float # Profit/Loss in pips
    # Optional: Metadata
    strategy_type: Optional[str] = None # Strategy used for the trade
    entry_reason: Optional[str] = None
    exit_reason: Optional[str] = None
    features: Dict[str, Any] = field(default_factory=dict) # Features related to the trade decision

@dataclass
class Account:
    """Data class for account information."""
    # --- Fields likely mapped from Tradovate Account object ---
    id: int # Tradovate Account ID (usually integer)
    name: Optional[str] = None # Tradovate Account Name
    account_type: Optional[str] = None # Tradovate Account Type (e.g., 'Demo', 'Live')
    base_currency: str = 'USD' # Tradovate Account Currency
    balance: float = 0.0 # Tradovate 'balance' field
    equity: float = 0.0 # Tradovate 'totalCashValue' or similar might represent equity
    realized_pl: Optional[float] = None # Tradovate 'realizedPL'
    unrealized_pl: Optional[float] = None # Tradovate 'unrealizedPL'
    margin_used: Optional[float] = None # Tradovate 'marginUsed' or 'totalInitialMargin'
    margin_available: Optional[float] = None # Tradovate 'buyingPower' or similar
    # --- Fields potentially calculated or tracked by system ---
    initial_balance: Optional[float] = None # Balance at the start (e.g., of day)
    day_pl: Optional[float] = None # Profit/Loss for the current trading day (calculated)